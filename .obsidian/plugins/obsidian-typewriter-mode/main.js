var $=Object.defineProperty;var me=Object.getOwnPropertyDescriptor;var ue=Object.getOwnPropertyNames;var fe=Object.prototype.hasOwnProperty;var ye=(t,e)=>{for(var i in e)$(t,i,{get:e[i],enumerable:!0})},we=(t,e,i,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of ue(e))!fe.call(t,o)&&o!==i&&$(t,o,{get:()=>e[o],enumerable:!(r=me(e,o))||r.enumerable});return t};var be=t=>we($({},"__esModule",{value:!0}),t);var Ee={};ye(Ee,{default:()=>ve});module.exports=be(Ee);var W={isTypewriterScrollEnabled:!0,isOnlyActivateAfterFirstInteractionEnabled:!1,isOnlyMaintainTypewriterOffsetWhenReachedEnabled:!1,isTypewriterOnlyUseCommandsEnabled:!1,typewriterOffset:.5,isKeepLinesAboveAndBelowEnabled:!1,linesAboveAndBelow:5,isMaxCharsPerLineEnabled:!1,maxCharsPerLine:64,isDimUnfocusedParagraphsEnabled:!1,dimUnfocusedEditorsBehavior:"dim",dimmedParagraphsOpacity:.25,isPauseDimUnfocusedParagraphsWhileScrollingEnabled:!0,isPauseDimUnfocusedParagraphsWhileSelectingEnabled:!0,isHighlightCurrentLineEnabled:!0,isHighlightCurrentLineOnlyInFocusedEditorEnabled:!1,currentLineHighlightStyle:"box",currentLineHighlightUnderlineThickness:1,currentLineHighlightColor:"#333",doesFullscreenWritingFocusShowHeader:!1,doesFullscreenWritingFocusShowVignette:!0,fullscreenWritingFocusVignetteStyle:"box"};var pe=require("obsidian");var G=require("obsidian"),c=class extends G.PluginSettingTab{plugin;constructor(e,i){super(e,i),this.plugin=i}display(){this.containerEl.empty(),Object.values(this.plugin.features).forEach(e=>e.registerSetting(this))}};var J=require("@codemirror/state");var a=J.Facet.define({combine:t=>t.length===0?W:t[t.length-1]});var Q=require("obsidian");var l=class{constructor(e){this.plugin=e}load(){}};var s=class extends l{enable(){}disable(){}};var n=class extends s{toggleClass=null;commandTitle;registerCommand(){this.hasCommand&&this.plugin.addCommand({id:this.setting,name:this.commandTitle,callback:this.toggle.bind(this)})}registerSetting(e){new Q.Setting(e.containerEl).setName(this.settingTitle).setDesc(this.settingDesc).setClass("typewriter-mode-setting").addToggle(i=>i.setValue(this.plugin.settings[this.setting]).onChange(r=>{this.toggle(r),e.display()})).setDisabled(!this.isSettingEnabled())}load(){this.registerCommand(),this.plugin.settings[this.setting]?this.enable():this.disable()}toggle(e=null){e===null&&(e=!this.plugin.settings[this.setting]),this.plugin.settings[this.setting]=e,e?this.enable():this.disable(),this.plugin.saveSettings().then()}reloadIfRequired(){this.requiresReload&&this.plugin.reloadCodeMirror()}enable(){this.toggleClass&&document.body.classList.add(this.toggleClass),this.reloadIfRequired()}disable(){this.toggleClass&&document.body.classList.remove(this.toggleClass),this.reloadIfRequired()}isSettingEnabled(){return!0}};var h=class extends n{setting="isHighlightCurrentLineEnabled";toggleClass="ptm-highlight-current-line";requiresReload=!0;hasCommand=!0;commandTitle="Toggle Highlight Current Line On/Off";settingTitle="Highlight Current Line";settingDesc="Highlights the line that the cursor is currently on"};var m=class extends n{setting="isHighlightCurrentLineOnlyInFocusedEditorEnabled";toggleClass="ptm-highlight-current-line-only-in-active-editor";requiresReload=!1;hasCommand=!1;settingTitle="Highlight Current Line Only In Focused Note";settingDesc="Only show highlighted line in the note your cursor is on (e.g. if you have multiple notes open in split panes)";isSettingEnabled(){return this.plugin.settings.isHighlightCurrentLineEnabled}};var u=class extends n{setting="isMaxCharsPerLineEnabled";toggleClass="ptm-max-chars-per-line";requiresReload=!1;hasCommand=!1;settingTitle="Limit Maximum Number of Characters Per Line";settingDesc="Limits the maximum number of characters per line"};var f=class extends n{setting="isPauseDimUnfocusedParagraphsWhileScrollingEnabled";toggleClass="ptm-dim-unfocused-paragraphs-pause-while-scrolling";requiresReload=!0;hasCommand=!1;settingTitle="Pause Dimming Unfocused Paragraphs While Scrolling";settingDesc="Paragraphs are not dimmed while scrolling";isSettingEnabled(){return this.plugin.settings.isDimUnfocusedParagraphsEnabled}};var y=class extends n{setting="isPauseDimUnfocusedParagraphsWhileSelectingEnabled";toggleClass="ptm-dim-unfocused-paragraphs-pause-while-selecting";requiresReload=!0;hasCommand=!1;settingTitle="Pause Dimming Unfocused Paragraphs While Selecting Text";settingDesc="Paragraphs are not dimmed while selecting text";isSettingEnabled(){return this.plugin.settings.isDimUnfocusedParagraphsEnabled}};var w=class extends n{setting="isTypewriterScrollEnabled";toggleClass="ptm-typewriter-scroll";requiresReload=!0;hasCommand=!0;commandTitle="Toggle Typewriter Scrolling On/Off";settingTitle="Typewriter Scrolling";settingDesc="Turns typewriter scrolling on or off";isSettingEnabled(){return!this.plugin.settings.isKeepLinesAboveAndBelowEnabled}};var b=class extends n{setting="isDimUnfocusedParagraphsEnabled";toggleClass="ptm-dim-unfocused-paragraphs";requiresReload=!0;hasCommand=!0;commandTitle="Toggle Dim Unfocused Paragraphs On/Off";settingTitle="Dim Unfocused Paragraphs";settingDesc="Darkens unfocused paragraphs in the editor"};var X=require("obsidian"),T=class extends s{setting="typewriterOffset";registerSetting(e){new X.Setting(e.containerEl).setName("Typewriter Offset").setDesc("Positions the typewriter line at the specified percentage of the screen").setClass("typewriter-mode-setting").addSlider(i=>i.setLimits(0,100,5).setDynamicTooltip().setValue(this.plugin.settings.typewriterOffset*100).onChange(r=>{this.changeTypewriterOffset(r/100)})).setDisabled(!this.plugin.settings.isTypewriterScrollEnabled)}changeTypewriterOffset(e){this.plugin.settings.typewriterOffset=e,this.plugin.settings.isTypewriterScrollEnabled&&this.plugin.reloadCodeMirror(),this.plugin.saveSettings().then()}};var Y=require("obsidian"),S=class extends s{setting="currentLineHighlightColor";registerSetting(e){new Y.Setting(e.containerEl).setName("Current Line Highlight Color").setDesc("The color of the current line highlight").setClass("typewriter-mode-setting").addText(i=>i.setValue(this.plugin.settings.currentLineHighlightColor).onChange(r=>{this.changeCurrentLineHighlightColor(r)})).setDisabled(!this.plugin.settings.isHighlightCurrentLineEnabled)}load(){this.plugin.setCSSVariable("--current-line-highlight-color",`${this.plugin.settings.currentLineHighlightColor}`)}changeCurrentLineHighlightColor(e){this.plugin.settings.currentLineHighlightColor=e,this.plugin.setCSSVariable("--current-line-highlight-color",`${e}`),this.plugin.saveSettings().then()}};var Z=require("obsidian"),v=class extends s{setting="currentLineHighlightStyle";registerSetting(e){new Z.Setting(e.containerEl).setName("Current Line Highlight Style").setDesc("The style of the current line highlight").setClass("typewriter-mode-setting").addDropdown(i=>i.addOption("box","Box").addOption("underline","Underline").setValue(this.plugin.settings.currentLineHighlightStyle).onChange(r=>{this.changeCurrentLineHighlightStyle(r),e.display()})).setDisabled(!this.plugin.settings.isHighlightCurrentLineEnabled)}changeCurrentLineHighlightStyle(e){this.plugin.settings.currentLineHighlightStyle=e,this.plugin.reloadCodeMirror(),this.plugin.saveSettings().then()}};var ee=require("obsidian"),E=class extends s{setting="currentLineHighlightUnderlineThickness";registerSetting(e){new ee.Setting(e.containerEl).setName("Current Line Underline Thickness").setDesc("The thickness of the underline that highlights the current line").setClass("typewriter-mode-setting").addSlider(i=>i.setLimits(1,5,1).setDynamicTooltip().setValue(this.plugin.settings.currentLineHighlightUnderlineThickness).onChange(r=>{this.changeCurrentLineHighlightUnderlineThickness(r)})).setDisabled(!this.plugin.settings.isHighlightCurrentLineEnabled||this.plugin.settings.currentLineHighlightStyle!=="underline")}load(){this.plugin.setCSSVariable("--current-line-highlight-underline-thickness",`${this.plugin.settings.currentLineHighlightUnderlineThickness}px`)}changeCurrentLineHighlightUnderlineThickness(e){this.plugin.settings.currentLineHighlightUnderlineThickness=e,this.plugin.setCSSVariable("--current-line-highlight-underline-thickness",`${e}px`),this.plugin.saveSettings().then()}};var te=require("obsidian"),C=class extends s{setting="dimmedParagraphsOpacity";registerSetting(e){new te.Setting(e.containerEl).setName("Dimmed Paragraphs' Opacity").setDesc("The opacity of dimmed paragraphs").setClass("typewriter-mode-setting").addSlider(i=>i.setLimits(0,100,5).setDynamicTooltip().setValue(this.plugin.settings.dimmedParagraphsOpacity*100).onChange(r=>{this.changeDimmedParagraphsOpacity(r/100)})).setDisabled(!this.plugin.settings.isDimUnfocusedParagraphsEnabled)}load(){this.plugin.setCSSVariable("--dimmed-paragraphs-opacity",`${this.plugin.settings.dimmedParagraphsOpacity}`)}changeDimmedParagraphsOpacity(e=.25){this.plugin.settings.dimmedParagraphsOpacity=e,this.plugin.setCSSVariable("--dimmed-paragraphs-opacity",`${e}`),this.plugin.saveSettings().then()}};var ie=require("obsidian"),L=class extends s{setting="maxCharsPerLine";registerSetting(e){new ie.Setting(e.containerEl).setName("Maximum Number of Characters Per Line").setDesc("The maximum number of characters per line").setClass("typewriter-mode-setting").addText(i=>i.setValue(this.plugin.settings.maxCharsPerLine.toString()).onChange(r=>{this.changeMaxCharsPerLine(parseInt(r))})).setDisabled(!this.plugin.settings.isMaxCharsPerLineEnabled)}load(){this.plugin.setCSSVariable("--max-chars-per-line",`${this.plugin.settings.maxCharsPerLine}ch`)}changeMaxCharsPerLine(e){this.plugin.settings.maxCharsPerLine=e,this.plugin.setCSSVariable("--max-chars-per-line",`${e}ch`),this.plugin.saveSettings().then()}};var p=class extends l{registerCommand(){this.plugin.addCommand({id:this.commandKey,name:this.commandTitle,callback:this.onCommand.bind(this)})}load(){this.registerCommand()}};var B=class extends p{commandKey="fullscreen-writing-focus";commandTitle="Toggle Fullscreen Writing Focus On/Off";onCommand(){let i=this.plugin.app.workspace.activeLeaf.view;i.getViewType()!=="empty"&&(document.fullscreenElement?this.exitFullscreenWritingFocus():this.startFullscreenWritingFocus(i),i.containerEl.onfullscreenchange=()=>{document.fullscreenElement||this.onExitFullscreenWritingFocus()})}startFullscreenWritingFocus(e){let i=this.plugin.settings.doesFullscreenWritingFocusShowHeader?e.containerEl:e.contentEl;i.requestFullscreen().then(()=>{i.classList.add("ptm-fullscreen-writing-focus-element"),i.setAttr("data-ptm-fullscreen-writing-focus-vignette-style",this.plugin.settings.fullscreenWritingFocusVignetteStyle)})}exitFullscreenWritingFocus(){document.exitFullscreen().then()}onExitFullscreenWritingFocus(){let e=document.getElementsByClassName("ptm-fullscreen-writing-focus-element");!e||e.length===0||(e[0].removeAttribute("data-ptm-fullscreen-writing-focus-vignette-style"),e[0].classList.remove("ptm-fullscreen-writing-focus-element"))}};var x=class extends n{setting="doesFullscreenWritingFocusShowHeader";toggleClass="ptm-fullscreen-writing-focus-show-header";requiresReload=!1;hasCommand=!1;settingTitle="Show Header in Fullscreen Writing Focus";settingDesc="If enabled, the header will be shown in fullscreen writing focus"};var M=class extends n{setting="doesFullscreenWritingFocusShowVignette";toggleClass="ptm-fullscreen-writing-focus-vignette";requiresReload=!1;hasCommand=!1;settingTitle="Fullscreen Writing Focus Vignette";settingDesc="Add a vignette to the edges of the screen in fullscreen writing focus"};function z(t){return t.charAt(0).toUpperCase()+t.slice(1)}var I=class extends l{load(){["up","down"].forEach(e=>{this.plugin.addCommand({id:`move-typewriter-${e}`,name:`Move Typewriter ${z(e)}`,hotkeys:[{modifiers:["Mod"],key:e==="up"?"ArrowUp":"ArrowDown"}],editorCallback:(i,r)=>this.onCommand(i,e)})})}onCommand(e,i){e.exec(`go${z(i)}`),window.dispatchEvent(new Event("moveByCommand"))}};var P=class extends n{setting="isTypewriterOnlyUseCommandsEnabled";toggleClass="ptm-typewriter-only-use-commands";requiresReload=!0;hasCommand=!1;settingTitle="Do Not Snap Typewriter With Arrow Keys";settingDesc="The typewriter will only snap when using this plugin's move commands. It will not snap when using the arrow keys. The move commands are by default Cmd/Ctrl+ArrowUp/ArrowDown, but you can assign your own hotkeys for the move commands in Obsidian's settings.";isSettingEnabled(){return this.plugin.settings.isTypewriterScrollEnabled}};var re=require("obsidian"),D=class extends s{setting="dimUnfocusedEditorsBehavior";registerSetting(e){new re.Setting(e.containerEl).setName("Paragraph Dimming Behavior in Unfocused Notes").setDesc("How to dim paragraphs in notes / editors that your cursor is not on (e.g. if you have multiple notes open in split panes)").setClass("typewriter-mode-setting").addDropdown(i=>i.addOption("dim-none","Do not dim any paragraph").addOption("dim","Dim all but the last focused paragraph").addOption("dim-all","Dim all paragraphs").setValue(this.plugin.settings.dimUnfocusedEditorsBehavior).onChange(r=>{this.changeDimUnfocusedEditorsBehavior(r),e.display()})).setDisabled(!this.plugin.settings.isDimUnfocusedParagraphsEnabled)}load(){super.load(),document.body.setAttr("data-ptm-dim-unfocused-editors-behavior",this.plugin.settings.dimUnfocusedEditorsBehavior)}changeDimUnfocusedEditorsBehavior(e){this.plugin.settings.dimUnfocusedEditorsBehavior=e,document.body.setAttr("data-ptm-dim-unfocused-editors-behavior",e),this.plugin.saveSettings().then()}};var O=class extends n{setting="isOnlyMaintainTypewriterOffsetWhenReachedEnabled";requiresReload=!0;hasCommand=!1;settingTitle="Only Maintain Typewriter Offset When Reached";settingDesc="The line that the cursor is on will not be scrolled to the center of the editor until it the specified typewriter offset is reached. This removes the additional space at the top of the editor.";isSettingEnabled(){return this.plugin.settings.isTypewriterScrollEnabled}};var N=require("@codemirror/view");var ne=require("@codemirror/state");var A=class{constructor(e){this.view=e;this.onLoad(),this.domResizeObserver=new ResizeObserver(this.onResize.bind(this)),this.domResizeObserver.observe(this.view.dom)}domResizeObserver;userEventAllowed(e){let{isTypewriterOnlyUseCommandsEnabled:i}=this.view.state.facet(a),r=/^(select|input|delete|undo|redo)(\..+)?$/,o=/^(select.pointer)$/;return i&&(r=/^(input|delete|undo|redo)(\..+)?$/,o=/^(select)(\..+)?$/),r.test(e)&&!o.test(e)}userEventsAllowed(e){let i=e.transactions.map(r=>r.annotation(ne.Transaction.userEvent)).filter(r=>r!==void 0);return i.length===0?null:i.reduce((r,o)=>r&&this.userEventAllowed(o),i.length>0)}update(e){let i=this.userEventsAllowed(e);if(i===null){this.updateNonUserEvent();return}i?this.updateAllowedUserEvent():this.updateDisallowedUserEvent()}onLoad(){}updateAllowedUserEvent(){}updateDisallowedUserEvent(){}updateNonUserEvent(){}onResize(){}destroy(){var e;(e=this.domResizeObserver)==null||e.disconnect()}};function oe(t,e){var i;return parseFloat((i=t.contentDOM.querySelector(".cm-active.cm-line"))==null?void 0:i.getCssPropertyValue(e).replace("px",""))}function se(t){var r;let e=((r=t.coordsAtPos(t.state.selection.main.head))==null?void 0:r.top)??0,i=t.dom.getBoundingClientRect().top;return e-i}function Te(t,e){let i=oe(t,"font-size"),r=t.state.facet(a).typewriterOffset,o=t.dom.clientHeight*r,g=(e-i)/2;return o-g}function Se(t){let e=oe(t,"line-height"),i=Te(t,e),r=se(t),{isTypewriterScrollEnabled:o,isKeepLinesAboveAndBelowEnabled:g,isOnlyMaintainTypewriterOffsetWhenReachedEnabled:ge}=t.state.facet(a),d;if(o)d=i,ge&&(d=t.scrollDOM.scrollTop+r<i?Math.min(i,r):i);else if(g){let{linesAboveAndBelow:K}=t.state.facet(a),j=t.defaultLineHeight*K,_=t.dom.clientHeight-t.defaultLineHeight*(K+1),ce=t.scrollDOM.scrollTop!==0&&r<j,he=r>_;ce?d=j:he?d=_:d=r}else d=se(t);return{typewriterOffset:i,scrollOffset:d,activeLineOffset:r,lineHeight:e}}function R(t,e,i){t.requestMeasure({key:e,read:r=>Se(r),write:(r,o)=>{window.requestAnimationFrame(()=>{i(r,o)})}})}var ae=N.ViewPlugin.fromClass(class extends A{currentLineHighlight=null;isInitialInteraction=!0;onLoad(){super.onLoad(),this.view.scrollDOM.addEventListener("wheel",this.onWheel.bind(this)),window.addEventListener("moveByCommand",this.moveByCommand.bind(this)),this.updateAfterExternalEvent()}updateAllowedUserEvent(){super.updateAllowedUserEvent(),this.view.dom.classList.remove("ptm-wheel"),this.view.dom.classList.remove("ptm-select"),this.isInitialInteraction&&(this.view.dom.classList.remove("ptm-first-open"),this.isInitialInteraction=!1),R(this.view,"TypewriterModeUpdateAfterUserEvent",(t,e)=>{this.recenterAndMoveCurrentLineHighlight(e,t)})}updateDisallowedUserEvent(){super.updateDisallowedUserEvent(),this.isInitialInteraction&&(this.view.dom.classList.remove("ptm-first-open"),this.isInitialInteraction=!1),this.view.dom.classList.add("ptm-select"),R(this.view,"TypewriterModeUpdateAfterUserEvent",({activeLineOffset:t,lineHeight:e},i)=>{let{isHighlightCurrentLineEnabled:r}=i.state.facet(a);r&&this.moveCurrentLineHighlight(i,t,e)})}updateNonUserEvent(){if(super.updateNonUserEvent(),!this.isInitialInteraction)return;let{isOnlyActivateAfterFirstInteractionEnabled:t}=this.view.state.facet(a);t&&this.view.dom.classList.add("ptm-first-open")}moveByCommand(){this.view.dom.classList.remove("ptm-select"),this.updateAllowedUserEvent()}onResize(){super.onResize(),this.updateAfterExternalEvent()}onWheel(){this.view.dom.classList.add("ptm-wheel")}destroy(){var t;super.destroy(),(t=this.currentLineHighlight)==null||t.remove(),this.view.scrollDOM.removeEventListener("wheel",this.onWheel),window.removeEventListener("moveByCommand",this.moveByCommand.bind(this))}updateAfterExternalEvent(){let{isTypewriterScrollEnabled:t}=this.view.state.facet(a);R(this.view,"TypewriterModeUpdateAfterExternalEvent",(e,i)=>{t&&this.setPadding(i,e.typewriterOffset),this.recenterAndMoveCurrentLineHighlight(i,e)})}createCurrentLineHighlight(t){this.currentLineHighlight=document.createElement("div"),this.currentLineHighlight.id="ptm-current-line-highlight";let e=t.state.facet(a);this.currentLineHighlight.className=`ptm-current-line-highlight-${e.currentLineHighlightStyle}`,t.dom.appendChild(this.currentLineHighlight)}moveCurrentLineHighlight(t,e,i){this.currentLineHighlight==null&&this.createCurrentLineHighlight(t),this.currentLineHighlight.style.height=`${i}px`,this.currentLineHighlight.style.top=`${e}px`}setPadding(t,e){let{isOnlyMaintainTypewriterOffsetWhenReachedEnabled:i}=t.state.facet(a),r=t.dom.getElementsByClassName("cm-sizer")[0];r.style.padding=i?`0 0 ${e}px 0`:`${e}px 0`}recenter(t,e){let i=t.state.selection.main.head,r=N.EditorView.scrollIntoView(i,{y:"start",yMargin:e}),o=t.state.update({effects:r});t.dispatch(o)}recenterAndMoveCurrentLineHighlight(t,{scrollOffset:e,lineHeight:i}){let{isTypewriterScrollEnabled:r,isKeepLinesAboveAndBelowEnabled:o,isHighlightCurrentLineEnabled:g}=t.state.facet(a);(r||o)&&this.recenter(t,e),g&&this.moveCurrentLineHighlight(t,e,i)}});var F=class extends n{setting="isOnlyActivateAfterFirstInteractionEnabled";requiresReload=!0;hasCommand=!1;settingTitle="Only Activate After First Interaction";settingDesc="Activate the focused line highlight and paragraph dimming only after the first interaction with the editor"};var q=class extends p{commandKey="typewriter-scrolling-and-paragraph-dimming";commandTitle="Toggle Typewriter Scrolling And Paragraph Dimming On/Off";onCommand(){let{isTypewriterScrollEnabled:e,isDimUnfocusedParagraphsEnabled:i}=this.plugin.settings,r=e&&i;this.plugin.features.TypewriterScroll.toggle(!r),this.plugin.features.DimUnfocusedParagraphs.toggle(!r)}};var H=class extends n{setting="isKeepLinesAboveAndBelowEnabled";requiresReload=!0;hasCommand=!0;commandTitle="Toggle Keep Lines Above And Below On/Off";settingTitle="Keep Lines Above And Below";settingDesc="When enabled, always keeps the specified amount of lines above and below the current line in view";isSettingEnabled(){return!this.plugin.settings.isTypewriterScrollEnabled}};var le=require("obsidian"),U=class extends s{setting="linesAboveAndBelow";registerSetting(e){new le.Setting(e.containerEl).setName("Amount of Lines Above and Below the Current Line").setDesc("The amount of lines to always keep above and below the current line").setClass("typewriter-mode-setting").addText(i=>i.setValue(this.plugin.settings.linesAboveAndBelow.toString()).onChange(r=>{this.changeAmountOfLinesAboveAndBelow(parseInt(r))})).setDisabled(this.plugin.settings.isTypewriterScrollEnabled||!this.plugin.settings.isKeepLinesAboveAndBelowEnabled)}changeAmountOfLinesAboveAndBelow(e){this.plugin.settings.linesAboveAndBelow=e,this.plugin.saveSettings().then()}};var de=require("obsidian"),V=class extends s{setting="fullscreenWritingFocusVignetteStyle";registerSetting(e){new de.Setting(e.containerEl).setName("Fullscreen Writing Focus Vignette Style").setDesc("The style of the vignette in fullscreen writing focus mode").setClass("typewriter-mode-setting").addDropdown(i=>i.addOption("box","Box").addOption("column","Column").setValue(this.plugin.settings.fullscreenWritingFocusVignetteStyle).onChange(r=>{this.changeVignetteStyle(r),e.display()})).setDisabled(!this.plugin.settings.doesFullscreenWritingFocusShowVignette)}changeVignetteStyle(e){this.plugin.settings.fullscreenWritingFocusVignetteStyle=e,this.plugin.saveSettings().then()}};var k=class extends pe.Plugin{settings;editorExtensions=[];features={TypewriterScroll:new w(this),TypewriterOffset:new T(this),OnlyMaintainTypewriterOffsetWhenReached:new O(this),TypewriterOnlyUseCommands:new P(this),KeepLinesAboveAndBelow:new H(this),LinesAboveAndBelow:new U(this),HighlightCurrentLine:new h(this),CurrentLineHighlightColor:new S(this),CurrentLineHighlightStyle:new v(this),CurrentLineHighlightUnderlineThickness:new E(this),HighlightCurrentLineOnlyInFocusedEditor:new m(this),DimUnfocusedParagraphs:new b(this),DimmedParagraphsOpacity:new C(this),PauseDimUnfocusedParagraphsWhileScrolling:new f(this),PauseDimUnfocusedParagraphsWhileSelecting:new y(this),DimUnfocusedEditorsBehavior:new D(this),OnlyActivateAfterFirstInteraction:new F(this),LimitMaxCharsPerLine:new u(this),MaxCharsPerLine:new L(this),FullscreenWritingFocusShowsHeader:new x(this),FullscreenWritingFocusVignette:new M(this),FullscreenWritingFocusVignetteStyle:new V(this)};commands={ToggleTypewriterAndDimming:new q(this),MoveTypewriter:new I(this),FullscreenWritingFocus:new B(this)};async onload(){await this.loadSettings(),Object.values(this.features).forEach(e=>e.load()),Object.values(this.commands).forEach(e=>e.load()),this.addSettingTab(new c(this.app,this)),this.registerEditorExtension(this.editorExtensions)}onunload(){Object.values(this.features).forEach(e=>e.disable())}reloadCodeMirror(){this.editorExtensions.splice(0,this.editorExtensions.length);let e=[a.of(this.settings),ae];this.editorExtensions.push(e),this.app.workspace.updateOptions()}async loadSettings(){this.settings=Object.assign(W,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}setCSSVariable(e,i){document.querySelector(":root").style.setProperty(e,i)}};var ve=k;
