/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => PreviewKeybinds
});
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  linesToScroll: 3,
  up: "k",
  down: "j",
  enterEditMode: "i",
  searchDoc: "/",
  scrollBottom: "g",
  scrollTop: "0",
  bottomOffset: 1
};
var PreviewKeybinds = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.onLayoutChange = () => {
      const previews = Array.from(document.querySelectorAll(".markdown-preview-view"));
      previews.forEach((preview) => {
        this.registerDomEvent(preview.parentElement, "keydown", this.onKeyDown);
      });
    };
    this.onKeyDown = (e) => {
      const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (!view)
        return;
      const preview = view.previewMode;
      if (preview.containerEl.querySelector("div.markdown-reading-view > div.document-search-container") || !preview) {
        console.debug("skipping keyboard event ", e.key);
        return;
      }
      switch (e.key) {
        case this.settings.up:
          preview.applyScroll(preview.getScroll() - this.settings.linesToScroll);
          break;
        case this.settings.down:
          preview.applyScroll(preview.getScroll() + this.settings.linesToScroll);
          break;
        case this.settings.enterEditMode:
          ;
          this.app.commands.executeCommandById("markdown:toggle-preview");
          break;
        case this.settings.searchDoc:
          view.showSearch(false);
          break;
        case this.settings.scrollTop:
          preview.applyScroll(0);
          break;
        case this.settings.scrollBottom:
          preview.applyScroll(view.editor.lastLine() - this.settings.bottomOffset);
          break;
        default:
          return;
      }
      e.preventDefault();
    };
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new PreviewKeybindsSettingTab(this.app, this));
      this.registerEvent(this.app.workspace.on("layout-change", this.onLayoutChange));
    });
  }
  onunload() {
    return __async(this, null, function* () {
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
var PreviewKeybindsSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.verifyNewKeyBinding = (newKey) => {
      if (newKey.length >= 0)
        newKey = newKey.trim().charAt(0);
      return newKey.toLowerCase();
    };
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Number of Lines to Scroll").setDesc("Affects 'Scroll up' and 'Scroll down' keybinds").addText((text) => text.setValue(this.plugin.settings.linesToScroll.toString()).onChange((value) => __async(this, null, function* () {
      let newVal = Number(value);
      if (newVal === null)
        return;
      if (newVal <= 0)
        newVal = 1;
      this.plugin.settings.linesToScroll = Math.round(newVal);
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Bottom offset (Workaround)").setDesc(`if "scroll to bottom" doesn't work, raise this number`).addText((text) => text.setValue(this.plugin.settings.bottomOffset.toString()).onChange((value) => __async(this, null, function* () {
      let newVal = Number(value);
      if (newVal === null)
        return;
      if (newVal <= 1)
        newVal = 1;
      this.plugin.settings.bottomOffset = Math.round(newVal);
      yield this.plugin.saveSettings();
    })));
    containerEl.createEl("h3", { text: "Custom Keybindings" });
    containerEl.createEl("p", {
      text: "Only non-space character keys (letters, symbols and digits) can be used for keybindings. Arrow keys, enter, space, tab etc. are not supproted. Modifier keys (shift, alt etc.) are not supported."
    });
    new import_obsidian.Setting(containerEl).setName("Scroll Up").addText((text) => text.setValue(this.plugin.settings.up).onChange((value) => __async(this, null, function* () {
      let newKey = this.verifyNewKeyBinding(value);
      if (newKey === "")
        return;
      this.plugin.settings.up = newKey;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Scroll Down").addText((text) => text.setValue(this.plugin.settings.down).onChange((value) => __async(this, null, function* () {
      let newKey = this.verifyNewKeyBinding(value);
      if (newKey === "")
        return;
      this.plugin.settings.down = newKey;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Enter Edit Mode").addText((text) => text.setValue(this.plugin.settings.enterEditMode).onChange((value) => __async(this, null, function* () {
      let newKey = this.verifyNewKeyBinding(value);
      if (newKey === "")
        return;
      this.plugin.settings.enterEditMode = newKey;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Search").addText((text) => text.setValue(this.plugin.settings.searchDoc).onChange((value) => __async(this, null, function* () {
      let newKey = this.verifyNewKeyBinding(value);
      if (newKey === "")
        return;
      this.plugin.settings.searchDoc = newKey;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Scroll to Bottom").addText((text) => text.setValue(this.plugin.settings.scrollBottom).onChange((value) => __async(this, null, function* () {
      let newKey = this.verifyNewKeyBinding(value);
      if (newKey === "")
        return;
      this.plugin.settings.scrollBottom = newKey;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Scroll to Top").addText((text) => text.setValue(this.plugin.settings.scrollTop).onChange((value) => __async(this, null, function* () {
      let newKey = this.verifyNewKeyBinding(value);
      if (newKey === "")
        return;
      this.plugin.settings.scrollTop = newKey;
      yield this.plugin.saveSettings();
    })));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHtcclxuXHRBcHAsXHJcblx0TWFya2Rvd25QcmV2aWV3VmlldyxcclxuXHRNYXJrZG93blZpZXcsXHJcblx0UGx1Z2luLFxyXG5cdFBsdWdpblNldHRpbmdUYWIsXHJcblx0U2V0dGluZyxcclxufSBmcm9tICdvYnNpZGlhbidcclxuXHJcbi8vIFJlbWVtYmVyIHRvIHJlbmFtZSB0aGVzZSBjbGFzc2VzIGFuZCBpbnRlcmZhY2VzIVxyXG5cclxuaW50ZXJmYWNlIFByZXZpZXdLZXliaW5kc1BsdWdpblNldHRpbmdzIHtcclxuXHRsaW5lc1RvU2Nyb2xsOiBudW1iZXJcclxuXHR1cDogc3RyaW5nXHJcblx0ZG93bjogc3RyaW5nXHJcblx0ZW50ZXJFZGl0TW9kZTogc3RyaW5nXHJcblx0c2VhcmNoRG9jOiBzdHJpbmdcclxuXHRzY3JvbGxCb3R0b206IHN0cmluZ1xyXG5cdHNjcm9sbFRvcDogc3RyaW5nXHJcblx0Ym90dG9tT2Zmc2V0OiBudW1iZXIgLy8gd29ya2Fyb3VuZCBmb3Igc2Nyb2xsIHRvIGJvdHRvbSBub3Qgd29ya2luZyBzZWUgIzEwXHJcbn1cclxuXHJcbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFByZXZpZXdLZXliaW5kc1BsdWdpblNldHRpbmdzID0ge1xyXG5cdGxpbmVzVG9TY3JvbGw6IDMsXHJcblx0dXA6ICdrJyxcclxuXHRkb3duOiAnaicsXHJcblx0ZW50ZXJFZGl0TW9kZTogJ2knLFxyXG5cdHNlYXJjaERvYzogJy8nLFxyXG5cdHNjcm9sbEJvdHRvbTogJ2cnLFxyXG5cdHNjcm9sbFRvcDogJzAnLFxyXG5cdGJvdHRvbU9mZnNldDogMSxcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJldmlld0tleWJpbmRzIGV4dGVuZHMgUGx1Z2luIHtcclxuXHRwdWJsaWMgc2V0dGluZ3M6IFByZXZpZXdLZXliaW5kc1BsdWdpblNldHRpbmdzXHJcblxyXG5cdGFzeW5jIG9ubG9hZCgpIHtcclxuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKClcclxuXHJcblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IFByZXZpZXdLZXliaW5kc1NldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKVxyXG5cclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudChcclxuXHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLm9uKCdsYXlvdXQtY2hhbmdlJywgdGhpcy5vbkxheW91dENoYW5nZSlcclxuXHRcdClcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgcmVhZG9ubHkgb25MYXlvdXRDaGFuZ2UgPSAoKTogdm9pZCA9PiB7XHJcblx0XHRjb25zdCBwcmV2aWV3czogSFRNTEVsZW1lbnRbXSA9IEFycmF5LmZyb20oXHJcblx0XHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tYXJrZG93bi1wcmV2aWV3LXZpZXcnKVxyXG5cdFx0KVxyXG5cdFx0cHJldmlld3MuZm9yRWFjaCgocHJldmlldykgPT4ge1xyXG5cdFx0XHQvKiBVc2luZyBwYXJlbnQgZWxlbWVudCB0byBwb3RlbnRpYWxseSBmaXggcHJldmlldyBub3QgYmVpbmcgZm9jdXNlZCBhZnRlciBjbG9zaW5nIHNlYXJjaCBiYXIsIHJldmVydCBpZiBkb2Vzbid0IHdvcms/ICovXHJcblx0XHRcdHRoaXMucmVnaXN0ZXJEb21FdmVudChcclxuXHRcdFx0XHRwcmV2aWV3LnBhcmVudEVsZW1lbnQsXHJcblx0XHRcdFx0J2tleWRvd24nLFxyXG5cdFx0XHRcdHRoaXMub25LZXlEb3duXHJcblx0XHRcdClcclxuXHRcdH0pXHJcblx0fVxyXG5cclxuXHRwcml2YXRlIHJlYWRvbmx5IG9uS2V5RG93biA9IChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XHJcblx0XHRjb25zdCB2aWV3OiBNYXJrZG93blZpZXcgPVxyXG5cdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpXHJcblx0XHRpZiAoIXZpZXcpIHJldHVyblxyXG5cclxuXHRcdGNvbnN0IHByZXZpZXc6IE1hcmtkb3duUHJldmlld1ZpZXcgPSB2aWV3LnByZXZpZXdNb2RlXHJcblxyXG5cdFx0aWYgKFxyXG5cdFx0XHRwcmV2aWV3LmNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3IoXHJcblx0XHRcdFx0J2Rpdi5tYXJrZG93bi1yZWFkaW5nLXZpZXcgPiBkaXYuZG9jdW1lbnQtc2VhcmNoLWNvbnRhaW5lcidcclxuXHRcdFx0KSB8fFxyXG5cdFx0XHQhcHJldmlld1xyXG5cdFx0KSB7XHJcblx0XHRcdGNvbnNvbGUuZGVidWcoJ3NraXBwaW5nIGtleWJvYXJkIGV2ZW50ICcsIGUua2V5KVxyXG5cdFx0XHRyZXR1cm5cclxuXHRcdH1cclxuXHJcblx0XHRzd2l0Y2ggKGUua2V5KSB7XHJcblx0XHRcdGNhc2UgdGhpcy5zZXR0aW5ncy51cDpcclxuXHRcdFx0XHRwcmV2aWV3LmFwcGx5U2Nyb2xsKFxyXG5cdFx0XHRcdFx0cHJldmlldy5nZXRTY3JvbGwoKSAtIHRoaXMuc2V0dGluZ3MubGluZXNUb1Njcm9sbFxyXG5cdFx0XHRcdClcclxuXHRcdFx0XHRicmVha1xyXG5cdFx0XHRjYXNlIHRoaXMuc2V0dGluZ3MuZG93bjpcclxuXHRcdFx0XHRwcmV2aWV3LmFwcGx5U2Nyb2xsKFxyXG5cdFx0XHRcdFx0cHJldmlldy5nZXRTY3JvbGwoKSArIHRoaXMuc2V0dGluZ3MubGluZXNUb1Njcm9sbFxyXG5cdFx0XHRcdClcclxuXHRcdFx0XHRicmVha1xyXG5cdFx0XHRjYXNlIHRoaXMuc2V0dGluZ3MuZW50ZXJFZGl0TW9kZTpcclxuXHRcdFx0XHQ7KHRoaXMuYXBwIGFzIGFueSkuY29tbWFuZHMuZXhlY3V0ZUNvbW1hbmRCeUlkKFxyXG5cdFx0XHRcdFx0J21hcmtkb3duOnRvZ2dsZS1wcmV2aWV3J1xyXG5cdFx0XHRcdClcclxuXHRcdFx0XHRicmVha1xyXG5cdFx0XHRjYXNlIHRoaXMuc2V0dGluZ3Muc2VhcmNoRG9jOlxyXG5cdFx0XHRcdHZpZXcuc2hvd1NlYXJjaChmYWxzZSlcclxuXHRcdFx0XHRicmVha1xyXG5cdFx0XHRjYXNlIHRoaXMuc2V0dGluZ3Muc2Nyb2xsVG9wOlxyXG5cdFx0XHRcdHByZXZpZXcuYXBwbHlTY3JvbGwoMClcclxuXHRcdFx0XHRicmVha1xyXG5cdFx0XHRjYXNlIHRoaXMuc2V0dGluZ3Muc2Nyb2xsQm90dG9tOlxyXG5cdFx0XHRcdHByZXZpZXcuYXBwbHlTY3JvbGwoXHJcblx0XHRcdFx0XHR2aWV3LmVkaXRvci5sYXN0TGluZSgpIC0gdGhpcy5zZXR0aW5ncy5ib3R0b21PZmZzZXRcclxuXHRcdFx0XHQpXHJcblx0XHRcdFx0YnJlYWtcclxuXHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRyZXR1cm5cclxuXHRcdH1cclxuXHRcdGUucHJldmVudERlZmF1bHQoKVxyXG5cdH1cclxuXHJcblx0YXN5bmMgb251bmxvYWQoKSB7fVxyXG5cclxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XHJcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbihcclxuXHRcdFx0e30sXHJcblx0XHRcdERFRkFVTFRfU0VUVElOR1MsXHJcblx0XHRcdGF3YWl0IHRoaXMubG9hZERhdGEoKVxyXG5cdFx0KVxyXG5cdH1cclxuXHJcblx0YXN5bmMgc2F2ZVNldHRpbmdzKCkge1xyXG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKVxyXG5cdH1cclxufVxyXG5cclxuY2xhc3MgUHJldmlld0tleWJpbmRzU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xyXG5cdHBsdWdpbjogUHJldmlld0tleWJpbmRzXHJcblxyXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IFByZXZpZXdLZXliaW5kcykge1xyXG5cdFx0c3VwZXIoYXBwLCBwbHVnaW4pXHJcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpblxyXG5cdH1cclxuXHJcblx0ZGlzcGxheSgpOiB2b2lkIHtcclxuXHRcdGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXNcclxuXHJcblx0XHRjb250YWluZXJFbC5lbXB0eSgpXHJcblxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdC5zZXROYW1lKCdOdW1iZXIgb2YgTGluZXMgdG8gU2Nyb2xsJylcclxuXHRcdFx0LnNldERlc2MoXCJBZmZlY3RzICdTY3JvbGwgdXAnIGFuZCAnU2Nyb2xsIGRvd24nIGtleWJpbmRzXCIpXHJcblx0XHRcdC5hZGRUZXh0KCh0ZXh0KSA9PlxyXG5cdFx0XHRcdHRleHRcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5saW5lc1RvU2Nyb2xsLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRcdGxldCBuZXdWYWwgPSBOdW1iZXIodmFsdWUpXHJcblx0XHRcdFx0XHRcdC8qIGNvbXBhcmUgdG8gTmFOIGluc3RlYWQ/ICovXHJcblx0XHRcdFx0XHRcdGlmIChuZXdWYWwgPT09IG51bGwpIHJldHVyblxyXG5cdFx0XHRcdFx0XHRpZiAobmV3VmFsIDw9IDApIG5ld1ZhbCA9IDFcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubGluZXNUb1Njcm9sbCA9IE1hdGgucm91bmQobmV3VmFsKVxyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKVxyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0KVxyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnQm90dG9tIG9mZnNldCAoV29ya2Fyb3VuZCknKVxyXG5cdFx0XHQuc2V0RGVzYygnaWYgXCJzY3JvbGwgdG8gYm90dG9tXCIgZG9lc25cXCd0IHdvcmssIHJhaXNlIHRoaXMgbnVtYmVyJylcclxuXHRcdFx0LmFkZFRleHQoKHRleHQpID0+XHJcblx0XHRcdFx0dGV4dFxyXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmJvdHRvbU9mZnNldC50b1N0cmluZygpKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRsZXQgbmV3VmFsID0gTnVtYmVyKHZhbHVlKVxyXG5cdFx0XHRcdFx0XHRpZiAobmV3VmFsID09PSBudWxsKSByZXR1cm5cclxuXHRcdFx0XHRcdFx0aWYgKG5ld1ZhbCA8PSAxKSBuZXdWYWwgPSAxXHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmJvdHRvbU9mZnNldCA9IE1hdGgucm91bmQobmV3VmFsKVxyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKVxyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0KVxyXG5cclxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ0N1c3RvbSBLZXliaW5kaW5ncycgfSlcclxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdwJywge1xyXG5cdFx0XHR0ZXh0OiAnT25seSBub24tc3BhY2UgY2hhcmFjdGVyIGtleXMgKGxldHRlcnMsIHN5bWJvbHMgYW5kIGRpZ2l0cykgY2FuIGJlIHVzZWQgZm9yIGtleWJpbmRpbmdzLiBBcnJvdyBrZXlzLCBlbnRlciwgc3BhY2UsIHRhYiBldGMuIGFyZSBub3Qgc3VwcHJvdGVkLiBNb2RpZmllciBrZXlzIChzaGlmdCwgYWx0IGV0Yy4pIGFyZSBub3Qgc3VwcG9ydGVkLicsXHJcblx0XHR9KVxyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKS5zZXROYW1lKCdTY3JvbGwgVXAnKS5hZGRUZXh0KCh0ZXh0KSA9PlxyXG5cdFx0XHR0ZXh0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnVwKS5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRsZXQgbmV3S2V5OiBzdHJpbmcgPSB0aGlzLnZlcmlmeU5ld0tleUJpbmRpbmcodmFsdWUpXHJcblx0XHRcdFx0aWYgKG5ld0tleSA9PT0gJycpIHJldHVyblxyXG5cdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnVwID0gbmV3S2V5XHJcblx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKClcclxuXHRcdFx0fSlcclxuXHRcdClcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbCkuc2V0TmFtZSgnU2Nyb2xsIERvd24nKS5hZGRUZXh0KCh0ZXh0KSA9PlxyXG5cdFx0XHR0ZXh0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmRvd24pLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdGxldCBuZXdLZXk6IHN0cmluZyA9IHRoaXMudmVyaWZ5TmV3S2V5QmluZGluZyh2YWx1ZSlcclxuXHRcdFx0XHRpZiAobmV3S2V5ID09PSAnJykgcmV0dXJuXHJcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZG93biA9IG5ld0tleVxyXG5cdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpXHJcblx0XHRcdH0pXHJcblx0XHQpXHJcblxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpLnNldE5hbWUoJ0VudGVyIEVkaXQgTW9kZScpLmFkZFRleHQoKHRleHQpID0+XHJcblx0XHRcdHRleHRcclxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZW50ZXJFZGl0TW9kZSlcclxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRsZXQgbmV3S2V5OiBzdHJpbmcgPSB0aGlzLnZlcmlmeU5ld0tleUJpbmRpbmcodmFsdWUpXHJcblx0XHRcdFx0XHRpZiAobmV3S2V5ID09PSAnJykgcmV0dXJuXHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbnRlckVkaXRNb2RlID0gbmV3S2V5XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKVxyXG5cdFx0XHRcdH0pXHJcblx0XHQpXHJcblxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpLnNldE5hbWUoJ1NlYXJjaCcpLmFkZFRleHQoKHRleHQpID0+XHJcblx0XHRcdHRleHRcclxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2VhcmNoRG9jKVxyXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdGxldCBuZXdLZXk6IHN0cmluZyA9IHRoaXMudmVyaWZ5TmV3S2V5QmluZGluZyh2YWx1ZSlcclxuXHRcdFx0XHRcdGlmIChuZXdLZXkgPT09ICcnKSByZXR1cm5cclxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnNlYXJjaERvYyA9IG5ld0tleVxyXG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKClcclxuXHRcdFx0XHR9KVxyXG5cdFx0KVxyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKS5zZXROYW1lKCdTY3JvbGwgdG8gQm90dG9tJykuYWRkVGV4dCgodGV4dCkgPT5cclxuXHRcdFx0dGV4dFxyXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zY3JvbGxCb3R0b20pXHJcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0bGV0IG5ld0tleTogc3RyaW5nID0gdGhpcy52ZXJpZnlOZXdLZXlCaW5kaW5nKHZhbHVlKVxyXG5cdFx0XHRcdFx0aWYgKG5ld0tleSA9PT0gJycpIHJldHVyblxyXG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3Muc2Nyb2xsQm90dG9tID0gbmV3S2V5XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKVxyXG5cdFx0XHRcdH0pXHJcblx0XHQpXHJcblxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpLnNldE5hbWUoJ1Njcm9sbCB0byBUb3AnKS5hZGRUZXh0KCh0ZXh0KSA9PlxyXG5cdFx0XHR0ZXh0XHJcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNjcm9sbFRvcClcclxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRsZXQgbmV3S2V5OiBzdHJpbmcgPSB0aGlzLnZlcmlmeU5ld0tleUJpbmRpbmcodmFsdWUpXHJcblx0XHRcdFx0XHRpZiAobmV3S2V5ID09PSAnJykgcmV0dXJuXHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5zY3JvbGxUb3AgPSBuZXdLZXlcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpXHJcblx0XHRcdFx0fSlcclxuXHRcdClcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgcmVhZG9ubHkgdmVyaWZ5TmV3S2V5QmluZGluZyA9IChuZXdLZXk6IHN0cmluZyk6IHN0cmluZyA9PiB7XHJcblx0XHRpZiAobmV3S2V5Lmxlbmd0aCA+PSAwKSBuZXdLZXkgPSBuZXdLZXkudHJpbSgpLmNoYXJBdCgwKVxyXG5cdFx0cmV0dXJuIG5ld0tleS50b0xvd2VyQ2FzZSgpXHJcblx0fVxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBT087QUFlUCxJQUFNLG1CQUFrRDtBQUFBLEVBQ3ZELGVBQWU7QUFBQSxFQUNmLElBQUk7QUFBQSxFQUNKLE1BQU07QUFBQSxFQUNOLGVBQWU7QUFBQSxFQUNmLFdBQVc7QUFBQSxFQUNYLGNBQWM7QUFBQSxFQUNkLFdBQVc7QUFBQSxFQUNYLGNBQWM7QUFBQTtBQUdmLG9DQUE2Qyx1QkFBTztBQUFBLEVBQXBELGNBakNBO0FBaUNBO0FBYWtCLDBCQUFp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
