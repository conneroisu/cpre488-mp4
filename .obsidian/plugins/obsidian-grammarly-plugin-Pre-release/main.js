/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianGrammarlyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// plugin.ts
var import_view = require("@codemirror/view");

// node_modules/@grammarly/editor-sdk/lib/index.esm.js
function n(n2, t2, r2) {
  return t2 in n2 ? Object.defineProperty(n2, t2, { value: r2, enumerable: true, configurable: true, writable: true }) : n2[t2] = r2, n2;
}
var t = /* @__PURE__ */ new Map();
var r = class extends Error {
  constructor(t2, r2) {
    var e2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
    super(), n(this, "args", void 0), n(this, "code", void 0), n(this, "url", void 0);
    var o2 = new URL("https://developer.grammarly.com/docs/error-explainer");
    o2.searchParams.set("code", t2.toString()), r2.forEach((n2) => o2.searchParams.append("args", function(n3) {
      if (n3 instanceof Error)
        return n3.message + "\n" + String(n3.stack);
      if (n3 == null)
        return "null";
      if (typeof n3 == "object")
        try {
          return Object.prototype.toString.call(n3);
        } catch (n4) {
        }
      return String(n3);
    }(n2))), this.stack != null && o2.searchParams.set("trace", this.stack), this.message = "".concat(e2, "Minified error #").concat(t2, ": See ").concat(o2.toString(), " for details."), this.args = r2, this.code = t2, this.url = o2.toString();
  }
  toUserMessage() {
    var n2 = t.get("".concat(this.code));
    if (n2 == null)
      return [this];
    var r2 = new Map(this.args.map((n3, t2) => ["${".concat(t2, "}"), n3]));
    return n2.split(/(\${\d+})/).filter((n3) => n3 !== "").map((n3) => {
      var t2;
      return (t2 = r2.get(n3)) !== null && t2 !== void 0 ? t2 : n3;
    });
  }
  static setMessages(n2) {
    t = n2;
  }
  static create(n2, t2) {
    var e2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "", o2 = arguments.length > 3 ? arguments[3] : void 0;
    o2 != null && t2.push(o2);
    var a2 = new r(n2, t2, e2);
    return a2.stack = o2 == null ? void 0 : o2.stack, a2;
  }
};
var e = /* @__PURE__ */ new WeakMap();
async function o(n2, t2, r2) {
  return await a("@grammarly/editor-sdk", n2, t2, r2);
}
async function a(n2, t2, o2, a2) {
  if (typeof window == "undefined" && a2 === void 0)
    throw new r(21, []);
  const i = function(n3) {
    return n3.location.origin !== "null" ? n3.location.origin : n3.origin !== "null" ? n3.origin : "null";
  }(a2 != null ? a2 : window);
  i === "null" && (a2 != null ? a2 : window).top !== (a2 != null ? a2 : window) && console.warn("Grammarly is not supported in IFrames with `null` origin. Consider adding `sandbox='allow-same-origin allow-scripts'` to <iframe> element.");
  const s = new URL("https://js.grammarly.com/grammarly-editor-sdk@2.2", i);
  t2 != null && s.searchParams.set("clientId", t2), s.searchParams.set("packageName", n2);
  const c = await async function(n3, t3) {
    const o3 = e.get(n3);
    if (o3 != null)
      return await o3;
    !function(n4) {
      n4.Grammarly == null && (n4.Grammarly = {});
    }(n3);
    const a3 = new Promise((e2, o4) => {
      try {
        let e3 = function(n4, t4) {
          return n4.document.querySelectorAll(`script[src^="${t4.replace(/\?.*$/, "")}"]`)[0];
        }(n3, t3);
        e3 != null ? a4() : (e3 = function(n4, t4) {
          const r2 = n4.document.createElement("script");
          return r2.src = t4, n4.document.head.appendChild(r2), r2;
        }(n3, t3), e3.addEventListener("load", a4), e3.addEventListener("error", function() {
          try {
            throw new r(23, []);
          } catch (n4) {
            o4(n4);
          }
        }));
      } catch (n4) {
        return o4(n4);
      }
      function a4() {
        try {
          if (n3.Grammarly == null || typeof n3.Grammarly.EditorSDK != "function")
            throw new r(22, []);
          e2(n3.Grammarly);
        } catch (n4) {
          o4(n4);
        }
      }
    });
    return e.set(n3, a3), await a3;
  }(a2 != null ? a2 : window, s.toString());
  if (t2 != null)
    return new c.EditorSDK(t2, o2);
}

// plugin.ts
var initializeGrammarly = (view, settings) => {
  const initialize = o(settings.client_id);
  initialize.then((grammarly) => {
    var _a;
    grammarly.addPlugin(view.contentDOM, {
      documentDialect: "auto-text",
      documentDomain: "academic",
      activation: "immediate"
    }, view.scrollDOM);
    var host = document.querySelector("grammarly-editor-plugin");
    var style = document.createElement("style");
    var inner_html = `
		.nvqxur1>:nth-child(2):not(article)
		{
			left: 80px !important;
		}

		div:has(div[aria-label="Grammarly Settings"])
		{
			left: 80px !important;
		}

		div[role="tooltip"] {
			left: 80px !important;
		}
		`;
    if (settings.left_offset != "0") {
      inner_html = inner_html + `
				.nvqxur1 div[role=dialog]
				{
					left: ` + settings.left_offset + `px !important;
				}`;
    }
    if (settings.top_offset != "0") {
      inner_html = inner_html + `
				.nvqxur1 div[role=dialog]
				{
					top: ` + settings.top_offset + `px !important;
				}`;
    }
    style.innerHTML = inner_html;
    (_a = host == null ? void 0 : host.shadowRoot) == null ? void 0 : _a.appendChild(style);
  });
};
var GrammarlyPlugin = class {
  constructor(view) {
  }
  update(update) {
  }
  destroy() {
  }
  initialize(view, settings) {
    return initializeGrammarly(view, settings);
  }
};
var grammarlyPlugin = import_view.ViewPlugin.fromClass(GrammarlyPlugin);

// main.ts
var DEFAULT_SETTINGS = {
  left_offset: "0",
  top_offset: "0",
  client_id: "client_SZRuwBMe5opCznxqMQCG3q",
  disable_tooltip: "true"
};
var ObsidianGrammarlyPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.extArray = [];
  }
  async onload() {
    await this.loadSettings();
    (0, import_obsidian.addIcon)("grammarly", '<svg fill="currentColor"  viewBox="0 0 24 24" role="img" xmlns="http://www.w3.org/2000/svg"><path fill="currentColor" d="M24 12c0 6.627-5.373 12-12 12S0 18.627 0 12C0 5.372 5.373 0 12 0c6.628 0 12 5.372 12 12m-9.633 1.626a.81.815 0 0 0-.799.965c.071.393.44.662.84.662h1.257l.729-.102c-1.166 1.71-3.19 2.498-5.405 2.15-1.802-.282-3.35-1.502-4.003-3.205-1.483-3.865 1.34-7.556 5.02-7.556 1.916 0 3.598 1.122 4.562 2.478.277.39.763.504 1.133.248a.795.8 0 0 0 .236-1.069h.006a7.04 7.04 0 0 0-6.425-3.233c-3.508.236-6.347 3.107-6.55 6.617-.233 4.086 3.007 7.421 7.037 7.421a6.976 6.976 0 0 0 5.304-2.413l-.153.855v.773c0 .4.269.77.662.84a.814.814 0 0 0 .964-.8v-4.63h-4.415"/></svg>');
    const ribbonIconEl = this.addRibbonIcon("grammarly", "Enable Grammarly", (evt) => {
      this.enableGrammarly();
    });
    this.addCommand({
      id: "enable-grammarly",
      name: "Enable Grammarly",
      editorCallback: (editor, view) => {
        this.enableGrammarly();
      }
    });
    if (!this.ext) {
      this.ext = grammarlyPlugin;
      this.extArray = [this.ext];
      this.registerEditorExtension(this.extArray);
    }
    this.addSettingTab(new MainSettingsTab(this.app, this));
  }
  onunload() {
  }
  enableGrammarly() {
    var _a, _b, _c;
    new import_obsidian.Notice("Grammarly has been enabled.");
    const view = (_c = (_b = (_a = this == null ? void 0 : this.app) == null ? void 0 : _a.workspace) == null ? void 0 : _b.activeLeaf) == null ? void 0 : _c.view;
    if (view != null) {
      const editorView = view.editor.cm;
      const plugin = editorView.plugin(grammarlyPlugin);
      if (plugin) {
        let tooltip_callback = function(mutations) {
          for (var i = 0; i < mutations.length; i++) {
            var mutation = mutations[i];
            if (mutation.addedNodes.length > 0) {
              for (var ii = 0; ii < mutation.addedNodes.length; ii++) {
                var node = mutation.addedNodes[ii];
                if (node.innerText == "Grammarly-powered editor") {
                  node.remove();
                }
              }
            }
          }
        };
        plugin.initialize(editorView, this.settings);
        const tooltip_observer = new MutationObserver(tooltip_callback);
        var tooltip_observer_element = document.querySelector("body");
        console.log(this.settings);
        if (this.settings.disable_tooltip == "true") {
          tooltip_observer.observe(tooltip_observer_element, { childList: true });
        }
      }
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var MainSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Grammarly Plugin Settings" });
    new import_obsidian.Setting(containerEl).setName("Left Popover Offset (in pixels)").setDesc("The Grammarly popover is placed incorrectly when using certain themes. If you encoutner this, this setting allows you to offset it to the left it so that it looks right.").addText((text) => text.setPlaceholder("Enter offset (in pixels)").setValue(this.plugin.settings.left_offset).onChange(async (value) => {
      this.plugin.settings.left_offset = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Top Popover Offset (in pixels)").setDesc("The Grammarly popover is placed incorrectly when using certain themes. If you encoutner this, this setting allows you to offset it from the top so that it looks right.").addText((text) => text.setPlaceholder("Enter offset (in pixels)").setValue(this.plugin.settings.top_offset).onChange(async (value) => {
      this.plugin.settings.top_offset = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Grammarly Client ID").setDesc("The Grammarly Editor SDK requires a client ID to operate. One is included by default, but you can change it if you like.").addText((text) => text.setPlaceholder("Client ID").setValue(this.plugin.settings.client_id).onChange(async (value) => {
      this.plugin.settings.client_id = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Remove Grammarly tooltip").setDesc("Set to false to show tooltip.").addText((text) => text.setPlaceholder("Remove tooltip").setValue(this.plugin.settings.disable_tooltip).onChange(async (value) => {
      this.plugin.settings.disable_tooltip = value;
      await this.plugin.saveSettings();
    }));
  }
};
/**
 * @license
 * (c) Copyright 2022 Grammarly, Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
//# sourceMappingURL=data:application/json;base64,
